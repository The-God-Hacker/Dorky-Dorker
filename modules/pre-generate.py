import re
import os
import os.path
import configparser
import subprocess
import codecs
import platform

if platform.system() == "Linux":
    clear = lambda: os.system('clear')
    clear()
if platform.system() == "Windows":
    clear = lambda: os.system('cls')
    clear()
print("You selected generate dorks.")
generatefile = "modules/generate.py"
try:
    os.remove(generatefile)
except OSError:
    pass
config = configparser.ConfigParser()
config.read_file(codecs.open('configs/objects.ini', "r", encoding="ISO-8859-1"))
create = open(generatefile,"w+")
create.write("import time\n")
create.write("import re\n")
create.write("import os\n")
create.write("import platform\n")
create.write("import os.path\n")
create.write("import configparser\n")
create.write("import subprocess\n")
create.write("if not os.path.exists(\"presets\"):\n")
create.write("    os.makedirs(\"presets\")\n")
create.write("if not os.path.exists(\"presets/dorktypes\"):\n")
create.write("    os.makedirs(\"presets/dorktypes\")\n")
for OBJECT in config.sections():
    create.write("if not os.path.exists(\"presets/" + config[OBJECT]["object_name"] + "s\"):\n")
    create.write("    os.makedirs(\"presets/" + config[OBJECT]["object_name"] + "s\")\n")

create.write("def file_len(fname):\n    with open(fname, errors=\"ignore\") as f:\n        for i, l in enumerate(f):\n            pass\n    return i + 1\n")
create.write("if not os.path.isfile(\"presets/dorktypes/preset1.txt\"):\n")
create.write("    create = open(\"presets/dorktypes/preset1.txt\",\"w+\")\n")
create.write("    create.write(\"(KW).(PT)?(PP)=\\n(KW).(PT)?(PP)= site:(DE)\\n(SF)\\\".(DE)\\\" + \\\"(KW)\\\"\\n(SF)(KW).(PT)?(PP)=\\n(SF)(KW).(PT)?(PP)= site:(DE)\\n(SF)(PP)=(KW).(PT)? site:(DE)\\n(SF)\\\"(KW)\\\" + \\\"(DE)\\\".(PT)?(PP)=\\n.(PT)?(PP)= \\\"(KW)\\\"\\n(PP)= \\\"(KW)\\\" + \\\".(DE)\\\"\\n.(PT)? + \\\".(DE)\\\" = (KW)\\n.(PT)?\\\"(KW)\\\" + \\\".(DE)\\\" (PP)=\\n(SF)(PP)= \\\"(KW)\\\" + \\\".(DE)\\n(PP)= (SF)\\\"(KW)\\\"\\n.(PT)?(SF)\\\"(KW)\\\" (PP)=\\n\\\".(DE)\\\" + \\\"(KW)\\\".(PT)?\\n(SF)(PP)= + \\\"(KW)\\\".(PT)?\\n(PP)= (KW).(PT)? (SF)(DE)\\n(KW) (PP)= .(PT)?\\n(PP)= (KW).(PT)?\\n(PP)= .(PT)? (KW)\\n.(PT)?(PP)= (KW)\\n.(PT)? (KW) (PP)=\\n(SF)(PP)= \\\"(KW)\\\".(PT)?\\n\\\"(KW)\\\".(PT)? (SF)(PP)=\\n.(PT)?(PP)= (SF)\\\"(KW)\\\"\\n(SF)\\\"(KW)\\\".(PT)?(PP)=\\n(SF)\\\"(KW)\\\" (PP)= .(PT)?\\n(PP)= .(PT)? (SF)\\\"(KW)\\\"\\n.(PT)?(PP)= (SF)\\\"(KW)\\\" + (DE)\\n(SF)\\\"(KW)\\\" + (DE).(PT)?(PP)=\\n(SF)\\\"(KW)\\\" + (DE) (PP)= .(PT)?\\n(PP)= .(PT)? (SF)\\\"(KW)\\\" + (DE)\\n.(PT)?(PP)= \\\"(KW)\\\" + (DE)\\n.(PT)?(PP)= (DE) + \\\"(KW)\\\"\\n\\\"(KW)\\\" + (DE).(PT)?(PP)=\\n(DE) + \\\"(KW)\\\".(PT)?(PP)=\\n\\\"(KW)\\\" + (DE) (PP)= .(PT)?\\n(PP)= .(PT)? \\\"(KW)\\\" + (DE)\\n(PP)= (DE) + \\\"(KW)\\\".(PT)?\\n.(PT)? (DE) + \\\"(KW)\\\" (PP)=\\n.(PT)? \\\"(KW)\\\" + (DE) (PP)=\")\n")
create.write("    create.close()\n")
create.write("if not os.path.isfile(\"presets/dorktypes/preset2.txt\"):\n")
create.write("    create = open(\"presets/dorktypes/preset2.txt\",\"w+\")\n")
create.write("    create.write(\".(PT)?(PP)= \\\"(KW)\\\" / (DE)\\n.(PT)?(PP)= (DE) / \\\"(KW)\\\"\\n\\\"(KW)\\\" / (DE).(PT)?(PP)=\\n(DE) / \\\"(KW)\\\".(PT)?(PP)=\\n\\\"(KW)\\\" / (DE) (PP)= .(PT)?\\n(PP)= (DE) / \\\"(KW)\\\".(PT)?\\n.(PT)? (DE) / \\\"(KW)\\\" (PP)=\\n.(PT)? \\\"(KW)\\\" / (DE) (PP)=\\n(KW) / (PT)?(PP)= site:(DE)\\n(KW) / (PT)= + site:(DE)\")\n")
create.write("    create.close()\n")
create.write("if not os.path.isfile(\"presets/dorktypes/preset3.txt\"):\n")
create.write("    create = open(\"presets/dorktypes/preset3.txt\",\"w+\")\n")
create.write("    create.write(\"\\\"(KW)\\\".(PT)?(PP)= \\\"(KW2)\\\"\\n\\\"(KW2)\\\" + \\\"(KW)\\\".(PT)?(PP)=\\n\\\"(KW)\\\" + \\\"(KW2)\\\".(PT)?(PP)=\\n.(PT)?(PP)= (SF)\\\"(KW)\\\" + \\\"(KW2)\\\"\\n.(PT)?(PP)= (SF)\\\"(KW2)\\\" + \\\"(KW)\\\"\\n(PP)= .(PT)? (SF)\\\"(KW)\\\" + \\\"(KW2)\\\"\\n(PP)= .(PT)? (SF)\\\"(KW2)\\\" + \\\"(KW)\\\"\\n(SF)\\\"(KW2)\\\" + \\\"(KW)\\\" (PP)= \\\"(KW)\\\".(PT)?\\n(SF)\\\"(KW)\\\" + \\\"(KW2)\\\" (PP)= \\\"(KW)\\\".(PT)?\")\n")
create.write("    create.close()\n")
create.write("if not os.path.isfile(\"presets/dorktypes/preset4.txt\"):\n")
create.write("    create = open(\"presets/dorktypes/preset4.txt\",\"w+\")\n")
create.write("    create.write(\"\\\"(KW2)\\\" / \\\"(KW)\\\".(PT)?(PP)=\\n\\\"(KW)\\\" / \\\"(KW2)\\\".(PT)?(PP)=\\n(PP)= .(PT)? (SF)\\\"(KW)\\\" / \\\"(KW2)\\\"\\n(PP)= .(PT)? (SF)\\\"(KW2)\\\" / \\\"(KW)\\\"\\n.(PT)?(PP)= (SF)\\\"(KW)\\\" / \\\"(KW2)\\\"\\n.(PT)?(PP)= (SF)\\\"(KW2)\\\" / \\\"(KW)\\\"\\n(SF)\\\"(KW2)\\\" / \\\"(KW)\\\" (PP)= \\\"(KW)\\\".(PT)?\\n(SF)\\\"(KW)\\\" / \\\"(KW2)\\\" (PP)= \\\"(KW)\\\".(PT)?\")\n")
create.write("    create.close()\n")
for OBJECT in config.sections():
    count = 0
    while count < 4:
        count += 1
        create.write("if not os.path.isfile(\"presets/" + config[OBJECT]["object_name"] + "s/preset" + str(count) + ".txt\"):\n")
        create.write("    create = open(\"presets/" + config[OBJECT]["object_name"] + "s/preset" + str(count) + ".txt\",\"w+\")\n")
        if config.has_option(OBJECT, "preset" + str(count)):
            create.write("    create.write(\"" + config[OBJECT]["preset" + str(count)] +"\")\n")
        else:
            create.write("    create.write(\"This preset is empty, you can edit this preset in presets/" + config[OBJECT]["object_name"] + "s/preset" + str(count) +".txt\")\n")
        create.write("    create.close()\n")
create.write("empty = re.compile(\"This preset is empty\")\n")
create.write("print(\"Dorktypes:\")\n")
create.write("print(\"1. Preset1\")\n")
create.write("print(\"2. Preset2\")\n")
create.write("print(\"3. Preset3\")\n")
create.write("print(\"4. Preset4\")\n")
create.write("print(\"You can edit the presets in /presets/dorktypes/.\")\n")
create.write("selecting = 1\n")
create.write("while selecting == 1:\n")
create.write("    try:\n")
create.write("        dorkselect = int(input(\"Select the dorktype preset you want to use:\"))\n")
create.write("    except:\n")
create.write("        dorkselect = 404\n")
create.write("    if dorkselect == 1:\n")
create.write("        print(\"You selected dorktype preset 1.\")\n")
create.write("        selecteddorklist = \"presets/dorktypes/preset1.txt\"\n")
create.write("        selecting = 2\n")
create.write("    elif dorkselect == 2:\n")
create.write("        print(\"You selected dorktype preset 2.\")\n")
create.write("        selecteddorklist = \"presets/dorktypes/preset2.txt\"\n")
create.write("        selecting = 2\n")
create.write("    elif dorkselect == 3:\n")
create.write("        print(\"You selected dorktype preset 3.\")\n")
create.write("        selecteddorklist = \"presets/dorktypes/preset3.txt\"\n")
create.write("        selecting = 2\n")
create.write("    elif dorkselect == 4:\n")
create.write("        print(\"You selected dorktype preset 4.\")\n")
create.write("        selecteddorklist = \"presets/dorktypes/preset4.txt\"\n")
create.write("        selecting = 2\n")
create.write("    else:\n")
create.write("        print(\"You didn't select a valid option, please try again.\")\n")
create.write("    if selecting == 2:\n")
create.write("        if not os.stat(selecteddorklist).st_size < 1:\n")
create.write("            f = open(selecteddorklist)\n")
create.write("            if not empty.match(f.read()):\n")
create.write("                selecting = 0\n")
create.write("                f.close()\n")
create.write("            else:\n")
create.write("                f.close()\n")
create.write("                print(\"The preset you selected is empty, please choose an other preset or change the content of the preset.\")\n")
create.write("                selecting = 1\n")
create.write("        else:\n")
create.write("            print(\"The preset you selected is empty, please choose an other preset or change the content of the preset.\")\n")
create.write("            selecting = 1\n")
create.write("if platform.system() == \"Linux\":\n")
create.write("    clear = lambda: os.system('clear')\n")
create.write("    clear()\n")
create.write("if platform.system() == \"Windows\":\n")
create.write("    clear = lambda: os.system('cls')\n")
create.write("    clear()\n")
for OBJECT in config.sections():
    count = 0
    create.write("has = 0\n")
    create.write("with open(selecteddorklist, 'r', encoding=\"ISO-8859-1\", errors=\"ignore\") as dorktypes:\n")
    create.write("    for dorktype in dorktypes:\n")
    create.write("        if ('(" + config[OBJECT]["object_abbreviation"] + ")' in dorktype) or ('(" + config[OBJECT]["object_abbreviation"].upper() + ")' in dorktype):\n")
    create.write("            has += 1\n")
    create.write("if has >= 1:\n")
    create.write("    print(\""+ config[OBJECT]["object_name"].capitalize() + "\")\n")
    while count < 4:

        count += 1
        create.write("    print(\""+ str(count) + ". Preset" + str(count) + "\")" + "\n")
    create.write("    print(\"You can edit the presets in /presets/" + config[OBJECT]["object_name"] +"s/.\")\n")
    create.write("    selecting = 1\n")
    create.write("    while selecting == 1:\n")
    create.write("        try:\n")
    create.write("            " + config[OBJECT]["object_name"] + "select = int(input(\"Select the " + config[OBJECT]["object_name"] + " preset you want to use:\"))\n")
    create.write("        except:\n")
    create.write("            " + config[OBJECT]["object_name"] + "select = 404\n")
    count = 0
    while count < 4:
        count += 1
        if count == 1:
            create.write("        if " + config[OBJECT]["object_name"] + "select == " + str(count) + ":\n")
            create.write("            print(\"You selected " + config[OBJECT]["object_name"] + " preset " + str(count) + ".\")\n")
            create.write("            selected" + config[OBJECT]["object_name"] + "list = \"presets/" + config[OBJECT]["object_name"] + "s/preset" + str(count) + ".txt\"\n")
            create.write("            selecting = 2\n")
        else:
            create.write("        elif " + config[OBJECT]["object_name"] + "select == " + str(count) + ":\n")
            create.write("            print(\"You selected " + config[OBJECT]["object_name"] + " preset " + str(count) + ".\")\n")
            create.write("            selected" + config[OBJECT]["object_name"] + "list = \"presets/" + config[OBJECT]["object_name"] + "s/preset" + str(count) + ".txt\"\n")
            create.write("            selecting = 2\n")
    create.write("        else:\n")
    create.write("            print(\"You didn't select a valid option, please try again.\")\n")
    create.write("        if selecting == 2:\n")
    create.write("            if not os.stat(selected" + config[OBJECT]["object_name"] + "list).st_size < 1:\n")
    create.write("                f = open(selected" + config[OBJECT]["object_name"] + "list)\n")
    create.write("                if not empty.match(f.read()):\n")
    create.write("                    selecting = 0\n")
    create.write("                    f.close()\n")
    create.write("                else:\n")
    create.write("                    f.close()\n")
    create.write("                    print(\"The preset you selected is empty, please choose an other preset or change the content of the preset.\")\n")
    create.write("                    selecting = 1\n")
    create.write("            else:\n")
    create.write("                print(\"The preset you selected is empty, please choose an other preset or change the content of the preset.\")\n")
    create.write("                selecting = 1\n")
    create.write("else:\n")
    create.write("    selected" + config[OBJECT]["object_name"] + "list = \"presets/" + config[OBJECT]["object_name"] + "s/preset1.txt\"\n")
    create.write("if platform.system() == \"Linux\":\n")
    create.write("    clear = lambda: os.system('clear')\n")
    create.write("    clear()\n")
    create.write("if platform.system() == \"Windows\":\n")
    create.write("    clear = lambda: os.system('cls')\n")
    create.write("    clear()\n")
    count = 0

create.write("totalcount = 0\n")
create.write("with open(selecteddorklist, 'r', encoding=\"ISO-8859-1\", errors=\"ignore\") as dorktypes:\n")
create.write("    for dorktype in dorktypes:\n")
create.write("        currentcount = 1\n")
for OBJECT in config.sections():
    create.write("        if ('(" + config[OBJECT]["object_abbreviation"] + ")' in dorktype) or ('(" + config[OBJECT]["object_abbreviation"].upper() + ")' in dorktype):\n")
    create.write("            currentcount = currentcount * file_len(selected" + config[OBJECT]["object_name"] + "list)\n")
create.write("        totalcount = totalcount + currentcount\n")
create.write("print(\"Generating \" + str(totalcount) + \" dorks.\")\n")
for OBJECT in config.sections():
    if count == 0:
        count += 1
        create.write("startt = time.time()\n")
        create.write(config[OBJECT]["object_abbreviation"] + "ps = open(\"" + config[OBJECT]["object_name"] + "_processing.txt\",\"w+\")\n")
        create.write("print(\"Processing " + config[OBJECT]["object_name"] + "s\")\n")
        create.write("with open(selecteddorklist, 'r', encoding=\"ISO-8859-1\", errors=\"ignore\") as dorktypes:\n")
        create.write("    for dorktype in dorktypes:\n")
        create.write("        dorktype = dorktype.rstrip('\\n')\n")
        create.write("        if ('(" + config[OBJECT]["object_abbreviation"] + ")' in dorktype) or ('(" + config[OBJECT]["object_abbreviation"].upper() + ")' in dorktype):\n")
        create.write("            with open(selected" + config[OBJECT]["object_name"] + "list, 'r', encoding=\"ISO-8859-1\", errors=\"ignore\") as " + config[OBJECT]["object_name"] + "s:\n")
        create.write("                for " + config[OBJECT]["object_name"] +" in " + config[OBJECT]["object_name"] + "s:\n")
        create.write("                    " + config[OBJECT]["object_name"] + " = " + config[OBJECT]["object_name"] + ".rstrip('\\n')\n")
        create.write("                    " + config[OBJECT]["object_abbreviation"] + "ps.write(re.sub(r'(?i)\\(" + config[OBJECT]["object_abbreviation"] + "\\)', " + config[OBJECT]["object_name"] + ", dorktype + \"\\n\"))\n")
        create.write("        else:\n")
        create.write("            " + config[OBJECT]["object_abbreviation"] + "ps.write(dorktype + \"\\n\")\n")
        prev = OBJECT
        create.write(config[OBJECT]["object_abbreviation"] + "ps.close()\n")
    else:
        create.write(config[OBJECT]["object_abbreviation"] + "ps = open(\"" + config[OBJECT]["object_name"] + "_processing.txt\",\"w+\")\n")
        create.write("print(\"Processing " + config[OBJECT]["object_name"] + "s\")\n")
        create.write("with open(\"" + config[prev]["object_name"] + "_processing.txt\"" + ", 'r', encoding=\"ISO-8859-1\", errors=\"ignore\") as " + config[prev]["object_abbreviation"] + "ps" + ":\n")
        create.write("    with open(selected" + config[OBJECT]["object_name"] + "list, 'r', encoding=\"ISO-8859-1\", errors=\"ignore\") as " + config[OBJECT]["object_name"] + "s:\n")
        create.write("        for " + config[prev]["object_abbreviation"] + "p" + " in " +  config[prev]["object_abbreviation"] + "ps"  + ":\n")
        create.write("            " + config[prev]["object_abbreviation"] + "p" + " = " + config[prev]["object_abbreviation"] + "p" + ".rstrip('\\n')\n")
        create.write("            if ('(" + config[OBJECT]["object_abbreviation"] + ")' in " + config[prev]["object_abbreviation"] + "p" + ") or ('(" + config[OBJECT]["object_abbreviation"].upper() + ")' in " + config[prev]["object_abbreviation"] + "p" + "):\n")
        create.write("                " + config[OBJECT]["object_name"] + "s.seek(0)\n")
        create.write("                for " + config[OBJECT]["object_name"] +" in " + config[OBJECT]["object_name"] + "s:\n")
        create.write("                    " + config[OBJECT]["object_name"] + " = " + config[OBJECT]["object_name"] + ".rstrip('\\n')\n")
        create.write("                    " + config[OBJECT]["object_abbreviation"] + "ps.write(re.sub(r'(?i)\\(" + config[OBJECT]["object_abbreviation"] + "\\)', " + config[OBJECT]["object_name"] + ", " + config[prev]["object_abbreviation"] + "p" + " + \"\\n\"))\n")
        create.write("            else:\n")
        create.write("                " + config[OBJECT]["object_abbreviation"] + "ps.write(" + config[prev]["object_abbreviation"] + "p" + " + \"\\n\")\n")
        create.write(config[OBJECT]["object_abbreviation"] + "ps.close()\n")
        create.write("os.remove(\"" + config[prev]["object_name"] + "_processing.txt\")\n")
        prev = OBJECT

create.write("finding = 1\n")
create.write("fnum = 1\n")
create.write("while finding == 1:\n")
create.write("    if os.path.isfile(\"output_\" + str(fnum) + \".txt\"):\n")
create.write("        fnum += 1\n")
create.write("    else:\n")
create.write("        os.rename(\"" + config[prev]["object_name"] + "_processing.txt\", \"output_\" + str(fnum) + \".txt\")\n")
create.write("        finding = 0\n")
create.write("print(\"Done generating\")\n")
create.write("print(\"It took \" + str(round(time.time() - startt)) + \" seconds to generate.\")\n")
create.write("input(\"Press enter to continue...\")\n")
create.write("if platform.system() == \"Linux\":\n")
create.write("    p = subprocess.call([\"python3\", \"start.py\"])\n")
create.write("if platform.system() == \"Windows\":\n")
create.write("    p = subprocess.call([\"python\", \"start.py\"])\n")
create.close()
if platform.system() == "Linux":
    p = subprocess.call(["python3", generatefile])
if platform.system() == "Windows":
    p = subprocess.call(["python", generatefile])